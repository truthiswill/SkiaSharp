parameters:
  name: ''                                      # in the form type_platform_host
  displayName: ''                               # the human name
  vmImage: ''                                   # the VM image
  target: ''                                    # the bootstrapper target
  preBuildSteps: []                             # any steps to run before the build
  postBuildSteps: []                            # any additional steps to run after the build
  additionalArgs: ''                            # any additional arguments to pass to the bootstrapper
  retryCount: 1                                 # the number of times to retry the bootstrapper
  configuration: $(CONFIGURATION)               # the build configuration
  buildExternals: $(DOWNLOAD_EXTERNALS)         # the build number to download externals from
  verbosity: $(VERBOSITY)                       # the level of verbosity to use when building

jobs:
# - ${{ if and(ne(parameters.buildExternals, ''), startsWith(parameters.name, 'native_')) }}:
#   - template: azure-templates-download.yml
#     parameters:
#       name: ${{ parameters.name }}
#       displayName: ${{ parameters.displayName }}
#       vmImage: ${{ parameters.vmImage }}

# - ${{ if or(eq(parameters.buildExternals, ''), not(startsWith(parameters.name, 'native_'))) }}:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.displayName }}
    timeoutInMinutes: 120
    pool:
      name: ${{ parameters.vmImage }}
    steps:
      - checkout: self
        submodules: recursive
      # build the Docker image
      - bash: docker build --tag skiasharp .
        workingDirectory: scripts/Docker/ubuntu16/amd64
        displayName: Build the Docker image
      # pre-build steps
      - ${{ parameters.preBuildSteps }}
      # build
      - bash: docker run --name skiasharp --volume $(pwd):/work skiasharp /bin/bash scripts/retry-command.sh ${{ parameters.retryCount }} ./bootstrapper.sh -t ${{ parameters.target }} -v ${{ parameters.verbosity }} -c ${{ coalesce(parameters.configuration, 'Release') }} ${{ parameters.additionalArgs }}
        displayName: Run the bootstrapper for ${{ parameters.target }} using the Docker image
      # check the build output
      - bash: |
          find output/native/linux -type f -name "*.so" -print0 | xargs -0 ldd -v
        displayName: List the dependencies for the native binaries
      - bash: |
          find output/native/linux -type f -name "*.so" -print0 | xargs -0 readelf -Ws | grep GLOBAL
        displayName: List the exported symbols for the native binaries
      # post-build steps
      - ${{ parameters.postBuildSteps }}
      # publish artifacts
      - task: PublishBuildArtifacts@1
        displayName: Publish the ${{ parameters.name }} artifacts
        inputs:
          artifactName: ${{ parameters.name }}
          pathToPublish: 'output'
